global !p
import vim
cc = vim.eval("&commentstring")[0]
def box(txt,hor='-', ver='|', cor='+'):
    retval=[]
    x = len(max(txt.splitlines(), key=len)) 
    y = len(txt.splitlines()) + 2
    for h in range(y):
        line=""
        if ( h == 0 or h == (y - 1)):
            line="{}{}{}".format(cor,(hor *  x),cor)
        else:
            st=txt.splitlines()[h-1]
            line="{}{:<{width}}{}".format(ver,st,ver,width=x)
        retval.append(line)
    return retval

def uuid_gen():
    import uuid
    u = str(uuid.uuid4())
    return u

def message_bar(ln, msg=""):
    # looks like
    # +|------------// Title brau //----|{{{
    if len(msg) > (ln - 8):
        retval = 'start over, buddy'
    else:
        retval = '+{mark}{message:{fill}>{width}}---|'.format(mark='|', message="// " + msg + " //", fill='.', width=ln)
    return retval
def todo_open(ln, txt=""):
    retval = "+{}".format('-' * ln)
    return retval

def com_open1(ln):
    retval =  "{}\n{} ".format((cc * ln), (cc * 2) )
    return retval
def com_open2(ln):
    fill = 5
    retval = "{}{}{}".format((cc * fill), ('-' * (ln - fill - 3)), '{{{')
    return retval

def com_close1(ln, txt=""):
    fill = 5
    retval = "{}{:-^{width}}{}".format((cc * fill),'|' + txt + '|','}}}', width=(ln - fill - 3))
    return retval

def com_close2(ln, txt=""):
    retval = "{} end: {}\n{}".format((cc * 2), txt, (cc * ln))
    return retval
endglobal


########################################################################
## comments and TODOs
#####----------------------------------------------------------------{{{


##############################################
## general comments
#####--------------------------------------{{{

#########
## section

snippet comT "top level section" !
`!p
snip.rv = message_bar(72, t[1])`{{{
 |TOP|  ${1:title}
$0
`!p
if not snip.c:
    snip.rv= message_bar(72, uuid_gen())
else:
    snip.rv=snip.c`}}}
endsnippet

#########
## component

snippet comh "component section" !
`!p
snip.rv = com_open1(46)`${1:title}
`!p
snip.rv = com_open2(46)`

$0

`!p
if not snip.c:
    snip.rv = com_close1(46 ) 
else: 
    snip.rv = snip.c`
`!p
snip.rv = com_close2(46, txt=t[1])`
endsnippet

#########
## part

snippet com "basic comment" !
`!p
snip.rv = com_open1(9)`${1:title}
$0
endsnippet

#####--------------------------------------}}}
## end: general comments
##############################################

##############################################
## visual comments
#####--------------------------------------{{{

#########
## section

snippet comHv "top level section" !
`!p
snip.rv = com_open1(72)`${1:title}
`!p
snip.rv = com_open2(72)`

$0
${VISUAL}

`!p
if not snip.c:
    snip.rv = com_close1(72, txt=uuid_gen() )
else: 
    snip.rv = snip.c`
`!p
snip.rv = com_close2(72, txt=t[1])`
endsnippet

#########
## component

snippet comhv "component section" !
`!p
snip.rv = com_open1(46)`${1:title}
`!p
snip.rv = com_open2(46)`

$0
${VISUAL}

`!p
if not snip.c:
    snip.rv = com_close1(46 ) 
else: 
    snip.rv = snip.c`
`!p
snip.rv = com_close2(46, txt=t[1])`
endsnippet

#####--------------------------------------}}}
## end: visual comments
##############################################

##############################################
## TODO
#####--------------------------------------{{{

snippet TODO "easily enter todo system records" !
`!p
snip.rv = message_bar(55, t[1])`{{{
 |TODO|  ${1:description}
${0}
`!p
import datetime
import getpass
if not snip.c:
    now = datetime.datetime.now()
    snip.rv= message_bar(55, uuid_gen())
else:
    snip.rv=snip.c`}}}
endsnippet


snippet todo "easily enter todo system records" !
`!p
snip.rv = message_bar(50, t[1])`{{{
 |TODO|  ${1:description}
${0}
`!p
import datetime
import getpass
if not snip.c:
    now = datetime.datetime.now()
    snip.rv= message_bar(50, uuid_gen())
else:
    snip.rv=snip.c`}}}
endsnippet
#####--------------------------------------}}}
## end: TODO
##############################################


#####-------------|3eeb8dbd-644e-4f75-a89c-83d816e60ead|-------------}}}
## end: comments and TODOs
########################################################################



snippet vbox "wrap current visual selection in box" !
`!p
snip.rv = '\n'.join(box(snip.v.text))` 
endsnippet

#######################
# comment component
# comment part
# TODO
# box 
# visual block to box

